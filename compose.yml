# Definição de redes personalizadas para melhor isolamento
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

# Definição de volumes para persistência de dados
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

services:
  # Aplicação PHP
  app:
    build:
      context: ./docker/php/.
      args:
        - ENVIRONMENT=${APP_ENV:-development}
    container_name: ${PROJECT_NAME:-app}-php
    restart: unless-stopped
    volumes:
      - .:/var/www/html:delegated
      - ./docker/php/conf.d:/usr/local/etc/php/conf.d:ro
    depends_on:
      - mysql
    environment:
      - APP_ENV=${APP_ENV:-development}
      - MYSQL_HOST=mysql
      - MYSQL_DATABASE=${MYSQL_DATABASE:-app}
      - MYSQL_USER=${MYSQL_USER:-app}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-app}
      - REDIS_HOST=redis
    networks:
      - backend
    profiles:
      - cli
      - web

  # Servidor Web Nginx
  nginx:
    build: 
      context: ./docker/nginx/.
    container_name: ${PROJECT_NAME:-app}-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
      - "${NGINX_SSL_PORT:-8443}:443"
    volumes:
      - .:/var/www/html:delegated
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - frontend
      - backend
    profiles:
      - web

  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: ${PROJECT_NAME:-app}-mysql
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/initdb.d:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: ${MYSQL_DATABASE:-app}
      MYSQL_USER: ${MYSQL_USER:-app}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-app}
    networks:
      - backend
    command: --default-authentication-plugin=mysql_native_password
    profiles:
      - cli
      - web

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-app}-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    profiles:
      - redis
